# Configuration for api.dao.cafe
# This configuration is designed to work with Cloudflare Full SSL

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=120r/m;

# Cloudflare IP addresses - update this list periodically
# https://www.cloudflare.com/ips/
geo $cloudflare_ip {
    default 0;
    
    # Cloudflare IPv4
    103.21.244.0/22 1;
    103.22.200.0/22 1;
    103.31.4.0/22 1;
    104.16.0.0/13 1;
    104.24.0.0/14 1;
    108.162.192.0/18 1;
    131.0.72.0/22 1;
    141.101.64.0/18 1;
    162.158.0.0/15 1;
    173.245.48.0/20 1;
    188.114.96.0/20 1;
    190.93.240.0/20 1;
    197.234.240.0/22 1;
    198.41.128.0/17 1;
    
    # Cloudflare IPv6
    2400:cb00::/32 1;
    2405:8100::/32 1;
    2405:b500::/32 1;
    2606:4700::/32 1;
    2803:f800::/32 1;
    2a06:98c0::/29 1;
    2c0f:f248::/32 1;
}

# Map for CORS origin validation
map $http_origin $cors_allow_origin {
    default "";
    "https://dao.cafe" "https://dao.cafe";
    "https://www.dao.cafe" "https://dao.cafe";
}

# Map for rate limiting based on auth header (not used)
# map $http_authorization $limit_key {
#     ~*^Bearer "auth";
#     default "api";
# }

server {
    listen 80;
    server_name api.dao.cafe;
    
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    http2 on;
    server_name api.dao.cafe;
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/certificate.pem;
    ssl_certificate_key /etc/nginx/ssl/private.key;
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    
    # OCSP Stapling (disabled)
    ssl_stapling off;
    # ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; font-src 'self'; connect-src 'self'; frame-ancestors 'none'; form-action 'self'; upgrade-insecure-requests;" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Cloudflare check - deny access if not from Cloudflare
    location @deny_access {
        return 403;
    }
    
    # CORS preflight handler
    location @cors_preflight {
        add_header 'Access-Control-Allow-Origin' 'https://dao.cafe' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    
    # API endpoints
    location /api/ {
        # Check if request is from Cloudflare
        if ($cloudflare_ip = 0) {
            return 403;
        }
        
        # Handle CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://dao.cafe' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Apply rate limiting based on auth header
        if ($http_authorization ~* "^Bearer") {
            limit_req zone=auth_limit burst=10 nodelay;
        }
        if (!$http_authorization) {
            limit_req zone=api_limit burst=10 nodelay;
        }
        
        proxy_pass http://app:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # CORS headers for API
        add_header 'Access-Control-Allow-Origin' 'https://dao.cafe' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Static files
    location /static/ {
        # Check if request is from Cloudflare
        if ($cloudflare_ip = 0) {
            return 403;
        }
        
        alias /var/www/static/;
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
    }
    
    # Media files
    location /media/ {
        # Check if request is from Cloudflare
        if ($cloudflare_ip = 0) {
            return 403;
        }
        
        alias /var/www/media/;
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
    }
    
    # API documentation
    location /api/docs/ {
        # Check if request is from Cloudflare
        if ($cloudflare_ip = 0) {
            return 403;
        }
        
        proxy_pass http://app:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Deny access to .ht files
    location ~ /\.ht {
        deny all;
    }
}
